// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "@openzeppelin/contracts/math/Math.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

import "./lib/Babylonian.sol";
import "./access/Operator.sol";
import "./utils/ContractGuard.sol";
import "../interfaces/ITreasury.sol";
import "../interfaces/IBasisAsset.sol";
import "../interfaces/IOracle.sol";
import "../interfaces/IBoardroom.sol";
import "../interfaces/IRegulationStats.sol";
import "../interfaces/IRewardPool.sol";

/*
    https://snowcrystals.finance
*/
contract Treasury is ITreasury, ContractGuard, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /* ========== STATE VARIABLES ========== */

    // governance
    address public operator;

    // flags
    bool public initialized = false;

    // epoch
    uint256 public startTime;
    uint256 public lastEpochTime;
    uint256 private epoch_ = 0;
    uint256 private epochLength_ = 0;
    uint256 public epochSupplyContractionLeft = 0;

    // core components
    address public maintoken;
    address public bondtoken;

    address public override boardroom;
    address public maintokenOracle;

    // price
    uint256 public maintokenPriceOne;
    uint256 public maintokenPriceCeiling;

    uint256 public seigniorageSaved;

    uint256 public nextSupplyTarget;

    uint256 public maxSupplyExpansionPercent;
    uint256 public bondDepletionFloorPercent;
    uint256 public seigniorageExpansionFloorPercent;
    uint256 public maxSupplyContractionPercent;
    uint256 public maxDebtRatioPercent;

    // 28 first epochs (1 week) with 4.5% expansion regardless of maintoken price
    uint256 public bootstrapEpochs;
    uint256 public bootstrapSupplyExpansionPercent;

    uint256 public override previousEpochMainTokenPrice;
    uint256 public allocateSeigniorageSalary;
    uint256 public maxDiscountRate; // when purchasing bond
    uint256 public maxPremiumRate; // when redeeming bond
    uint256 public discountPercent;
    uint256 public premiumPercent;
    uint256 public mintingFactorForPayingDebt; // print extra maintoken during debt phase

    address public override daoFund;
    uint256 public override daoFundSharedPercent; // 3000 (30%)

    address public override marketingFund;
    uint256 public override marketingFundSharedPercent; // 1000 (10%)

    address public override insuranceFund;
    uint256 public override insuranceFundSharedPercent; // 2000 (20%)

    address public regulationStats;

    address[] public maintokenLockedAccounts;

    // Multi-Pegs
    address[] public pegTokens;
    mapping(address => address) public pegTokenOracle;
    mapping(address => address) public pegTokenFarmingPool; // to exclude balance from supply
    mapping(address => uint256) public pegTokenEpochStart;
    mapping(address => uint256) public pegTokenSupplyTarget;
    mapping(address => uint256) public pegTokenMaxSupplyExpansionPercent; // 1% = 10000
    bool public multiPegEnabled;
    mapping(uint256 => mapping(address => bool)) public hasAllocatedPegToken; // epoch => pegToken => true/false

    mapping(address => bool) public strategist;

    /* =================== Added variables =================== */

    /* =================== Events =================== */

    event Initialized(address indexed executor, uint256 at);
    event BurnedBonds(address indexed from, uint256 bondAmount);
    event RedeemedBonds(
        address indexed from,
        uint256 maintokenAmount,
        uint256 bondAmount
    );
    event BoughtBonds(
        address indexed from,
        uint256 maintokenAmount,
        uint256 bondAmount
    );
    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);
    event FundingAdded(
        uint256 indexed epoch,
        uint256 timestamp,
        uint256 price,
        uint256 expanded,
        uint256 boardroomFunded,
        uint256 daoFunded,
        uint256 marketingFunded,
        uint256 insuranceFund
    );
    event PegTokenFundingAdded(
        address indexed pegToken,
        uint256 indexed epoch,
        uint256 timestamp,
        uint256 price,
        uint256 expanded,
        uint256 boardroomFunded,
        uint256 daoFunded,
        uint256 marketingFunded,
        uint256 insuranceFund
    );

    /* =================== Modifier =================== */

    modifier onlyOperator() {
        require(operator == msg.sender, "!operator");
        _;
    }

    modifier onlyStrategist() {
        require(
            strategist[msg.sender] || operator == msg.sender,
            "!strategist && !operator"
        );
        _;
    }

    modifier checkEpoch() {
        uint256 _nextEpochPoint = nextEpochPoint();
        require(block.timestamp >= _nextEpochPoint, "!opened");

        _;

        lastEpochTime = _nextEpochPoint;
        epoch_ = epoch_.add(1);
        epochSupplyContractionLeft = (getMainTokenPrice() >
            maintokenPriceCeiling)
            ? 0
            : IERC20(maintoken)
                .totalSupply()
                .mul(maxSupplyContractionPercent)
                .div(10000);
    }

    modifier checkOperator() {
        require(
            IBasisAsset(maintoken).operator() == address(this) &&
                IBasisAsset(bondtoken).operator() == address(this),
            "need more permission"
        );

        _;
    }

    modifier notInitialized() {
        require(!initialized, "initialized");

        _;
    }

    /* ========== VIEW FUNCTIONS ========== */

    // epoch
    function epoch() public view override returns (uint256) {
        return epoch_;
    }

    function nextEpochPoint() public view override returns (uint256) {
        return lastEpochTime.add(nextEpochLength());
    }

    function nextEpochLength() public view override returns (uint256) {
        return epochLength_;
    }

    function getPegPrice() external view override returns (int256) {
        return IOracle(maintokenOracle).getPegPrice();
    }

    function getPegPriceUpdated() external view override returns (int256) {
        return IOracle(maintokenOracle).getPegPriceUpdated();
    }

    // oracle
    function getMainTokenPrice()
        public
        view
        override
        returns (uint256 maintokenPrice)
    {
        try IOracle(maintokenOracle).consult(maintoken, 1e18) returns (
            uint144 price
        ) {
            return uint256(price);
        } catch {
            revert("oracle failed");
        }
    }

    function getMainTokenUpdatedPrice()
        public
        view
        override
        returns (uint256 _maintokenPrice)
    {
        try IOracle(maintokenOracle).twap(maintoken, 1e18) returns (
            uint144 price
        ) {
            return uint256(price);
        } catch {
            revert("oracle failed");
        }
    }

    function getPegTokenPrice(address _token)
        public
        view
        override
        returns (uint256 _pegTokenPrice)
    {
        if (_token == maintoken) {
            return getMainTokenPrice();
        }
        try IOracle(pegTokenOracle[_token]).consult(_token, 1e18) returns (
            uint144 price
        ) {
            return uint256(price);
        } catch {
            revert("oracle failed");
        }
    }

    function getPegTokenUpdatedPrice(address _token)
        public
        view
        override
        returns (uint256 _pegTokenPrice)
    {
        if (_token == maintoken) {
            return getMainTokenUpdatedPrice();
        }
        try IOracle(pegTokenOracle[_token]).twap(_token, 1e18) returns (
            uint144 price
        ) {
            return uint256(price);
        } catch {
            revert("oracle failed");
        }
    }

    function boardroomSharedPercent() external view override returns (uint256) {
        return
            uint256(10000)
                .sub(daoFundSharedPercent)
                .sub(marketingFundSharedPercent)
                .sub(insuranceFundSharedPercent);
    }

    // budget
    function getReserve() external view returns (uint256) {
        return seigniorageSaved;
    }

    function getBurnablemaintokenLeft()
        external
        view
        returns (uint256 _burnablemaintokenLeft)
    {
        uint256 _maintokenPrice = getMainTokenPrice();
        if (_maintokenPrice <= maintokenPriceOne) {
            uint256 _bondMaxSupply = IERC20(maintoken)
                .totalSupply()
                .mul(maxDebtRatioPercent)
                .div(10000);
            uint256 _bondSupply = IERC20(bondtoken).totalSupply();
            if (_bondMaxSupply > _bondSupply) {
                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);
                uint256 _maxBurnablemaintoken = _maxMintableBond
                    .mul(getBondDiscountRate())
                    .div(1e18);
                _burnablemaintokenLeft = Math.min(
                    epochSupplyContractionLeft,
                    _maxBurnablemaintoken
                );
            }
        }
    }

    function getRedeemableBonds()
        external
        view
        returns (uint256 _redeemableBonds)
    {
        uint256 _maintokenPrice = getMainTokenPrice();
        if (_maintokenPrice > maintokenPriceCeiling) {
            uint256 _totalmaintoken = IERC20(maintoken).balanceOf(
                address(this)
            );
            uint256 _rate = getBondPremiumRate();
            if (_rate > 0) {
                _redeemableBonds = _totalmaintoken.mul(1e18).div(_rate);
            }
        }
    }

    function getBondDiscountRate()
        public
        view
        override
        returns (uint256 _rate)
    {
        uint256 _maintokenPrice = getMainTokenPrice();
        if (_maintokenPrice <= maintokenPriceOne) {
            if (discountPercent == 0) {
                // no discount
                _rate = maintokenPriceOne;
            } else {
                uint256 _bondAmount = maintokenPriceOne.mul(1e18).div(
                    _maintokenPrice
                ); // to burn 1 maintoken
                uint256 _discountAmount = _bondAmount
                    .sub(maintokenPriceOne)
                    .mul(discountPercent)
                    .div(10000);
                _rate = maintokenPriceOne.add(_discountAmount);
                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {
                    _rate = maxDiscountRate;
                }
            }
        }
    }

    function getBondPremiumRate() public view override returns (uint256 _rate) {
        uint256 _maintokenPrice = getMainTokenPrice();
        if (_maintokenPrice > maintokenPriceCeiling) {
            if (premiumPercent == 0) {
                // no premium bonus
                _rate = maintokenPriceOne;
            } else {
                uint256 _premiumAmount = _maintokenPrice
                    .sub(maintokenPriceOne)
                    .mul(premiumPercent)
                    .div(10000);
                _rate = maintokenPriceOne.add(_premiumAmount);
                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {
                    _rate = maxDiscountRate;
                }
            }
        }
    }

    function getMainTokenCirculatingSupply()
        public
        view
        override
        returns (uint256)
    {
        return IERC20(maintoken).totalSupply().sub(getMainTokenLockedBalance());
    }

    function getMainTokenLockedBalance()
        public
        view
        override
        returns (uint256 _lockedBalance)
    {
        uint256 _length = maintokenLockedAccounts.length;
        IERC20 _maintoken = IERC20(maintoken);
        for (uint256 i = 0; i < _length; i++) {
            _lockedBalance = _lockedBalance.add(
                _maintoken.balanceOf(maintokenLockedAccounts[i])
            );
        }
    }

    function getNextExpansionRate() public view override returns (uint256) {
        return getPegTokenExpansionRate(maintoken);
    }

    function getNextExpansionAmount() external view override returns (uint256) {
        return
            getMainTokenCirculatingSupply().mul(getNextExpansionRate()).div(
                1e4
            );
    }

    function pegTokenLength() external view returns (uint256) {
        return pegTokens.length;
    }

    function getCirculatingSupply(address _token)
        public
        view
        returns (uint256)
    {
        return
            (_token == maintoken)
                ? getMainTokenCirculatingSupply()
                : IERC20(_token).totalSupply().sub(
                    IERC20(_token).balanceOf(pegTokenFarmingPool[_token])
                );
    }

    function getPegTokenExpansionRate(address _pegToken)
        public
        view
        override
        returns (uint256 _rate)
    {
        if (_pegToken != maintoken) {
            uint256 _epochStart = pegTokenEpochStart[_pegToken];
            if (_epochStart == 0 || _epochStart > epoch_.add(1)) return 0;
        } else if (epoch_ < bootstrapEpochs) {
            // 28 first epochs with 3.5% expansion
            return bootstrapSupplyExpansionPercent; // 1% = 1e18
        }
        uint256 _twap = getPegTokenUpdatedPrice(_pegToken);
        if (_twap > maintokenPriceCeiling) {
            uint256 _percentage = _twap.sub(maintokenPriceOne); // 1% = 1e16
            uint256 _mse = (_pegToken == maintoken)
                ? maxSupplyExpansionPercent.mul(1e14)
                : pegTokenMaxSupplyExpansionPercent[_pegToken].mul(1e12);
            if (_percentage > _mse) {
                _percentage = _mse;
            }
            _rate = _percentage.div(1e14);
        }
    }

    function getPegTokenExpansionAmount(address _pegToken)
        public
        view
        override
        returns (uint256)
    {
        uint256 _rate = getPegTokenExpansionRate(_pegToken);
        return getCirculatingSupply(_pegToken).mul(_rate).div(1e4);
    }

    /* ========== GOVERNANCE ========== */

    function initialize(
        address _maintoken,
        address _bondtoken,
        address _maintokenOracle,
        address _boardroom,
        uint256 _startTime
    ) public notInitialized {
        maintoken = _maintoken;
        bondtoken = _bondtoken;
        maintokenOracle = _maintokenOracle;
        boardroom = _boardroom;

        startTime = _startTime;
        epochLength_ = 6 hours;
        lastEpochTime = _startTime.sub(6 hours);

        maintokenPriceOne = 10**18; // This is to allow a PEG of 1 maintoken per VVS
        maintokenPriceCeiling = maintokenPriceOne.mul(1001).div(1000);

        maxSupplyExpansionPercent = 200; // Upto 3.0% supply for expansion

        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor
        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom
        maxSupplyContractionPercent = 450; // Upto 4.5% supply for contraction (to burn maintoken and mint bondtoken)
        maxDebtRatioPercent = 4500; // Upto 45% supply of bondtoken to purchase

        maxDiscountRate = 13e17; // 30% - when purchasing bond
        maxPremiumRate = 13e17; // 30% - when redeeming bond

        discountPercent = 0; // no discount
        premiumPercent = 6500; // 65% premium

        // First 28 epochs with 4.5% expansion
        bootstrapEpochs = 0;
        bootstrapSupplyExpansionPercent = 350;

        // set seigniorageSaved to it's balance
        seigniorageSaved = IERC20(maintoken).balanceOf(address(this));

        nextSupplyTarget = 10000000 ether; // 10B supply is the next target to reduce expansion rate
        allocateSeigniorageSalary = 1 ether; // 1 MAINTOKEN for allocateSeigniorage() calling

        initialized = true;
        operator = msg.sender;
        emit Initialized(msg.sender, block.number);
    }

    function setOperator(address _operator) external onlyOperator {
        operator = _operator;
    }

    function setBoardroom(address _boardroom) external onlyOperator {
        boardroom = _boardroom;
    }

    function setRegulationStats(address _regulationStats)
        external
        onlyOperator
    {
        regulationStats = _regulationStats;
    }

    function setMainTokenOracle(address _maintokenOracle)
        external
        onlyOperator
    {
        maintokenOracle = _maintokenOracle;
    }

    function setMainTokenPriceCeiling(uint256 _maintokenPriceCeiling)
        external
        onlyOperator
    {
        require(
            _maintokenPriceCeiling >= maintokenPriceOne &&
                _maintokenPriceCeiling <= maintokenPriceOne.mul(120).div(100),
            "out of range"
        ); // [$1.0, $1.2]
        maintokenPriceCeiling = _maintokenPriceCeiling;
    }

    function setEpochLength(uint256 _epochLength) external onlyOperator {
        epochLength_ = _epochLength;
    }

    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent)
        external
        onlyOperator
    {
        require(
            _maxSupplyExpansionPercent >= 10 &&
                _maxSupplyExpansionPercent <= 1000,
            "out of range"
        ); // [0.1%, 10%]
        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;
    }

    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent)
        external
        onlyOperator
    {
        require(
            _bondDepletionFloorPercent >= 500 &&
                _bondDepletionFloorPercent <= 10000,
            "out of range"
        ); // [5%, 100%]
        bondDepletionFloorPercent = _bondDepletionFloorPercent;
    }

    function setMaxSupplyContractionPercent(
        uint256 _maxSupplyContractionPercent
    ) external onlyOperator {
        require(
            _maxSupplyContractionPercent >= 100 &&
                _maxSupplyContractionPercent <= 1500,
            "out of range"
        ); // [0.1%, 15%]
        maxSupplyContractionPercent = _maxSupplyContractionPercent;
    }

    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent)
        external
        onlyOperator
    {
        require(
            _maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000,
            "out of range"
        ); // [10%, 100%]
        maxDebtRatioPercent = _maxDebtRatioPercent;
    }

    function setBootstrap(
        uint256 _bootstrapEpochs,
        uint256 _bootstrapSupplyExpansionPercent
    ) external onlyOperator {
        require(_bootstrapEpochs <= 120, "out of range"); // <= 1 month
        require(
            _bootstrapSupplyExpansionPercent >= 100 &&
                _bootstrapSupplyExpansionPercent <= 1000,
            "out of range"
        ); // [1%, 10%]
        bootstrapEpochs = _bootstrapEpochs;
        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;
    }

    function toggleMultiPegEnabled() external onlyOperator {
        multiPegEnabled = !multiPegEnabled;
    }

    function setExtraFunds(
        address _daoFund,
        uint256 _daoFundSharedPercent,
        address _marketingFund,
        uint256 _marketingFundSharedPercent,
        address _insuranceFund,
        uint256 _insuranceFundSharedPercent
    ) external onlyOperator {
        require(_daoFundSharedPercent == 0 || _daoFund != address(0), "zero");
        require(_daoFundSharedPercent <= 4000, "out of range"); // <= 40%
        require(
            _marketingFundSharedPercent == 0 || _marketingFund != address(0),
            "zero"
        );
        require(_marketingFundSharedPercent <= 2000, "out of range"); // <= 20%
        require(
            _insuranceFundSharedPercent == 0 || _insuranceFund != address(0),
            "zero"
        );
        require(_insuranceFundSharedPercent <= 3000, "out of range"); // <= 30%
        daoFund = _daoFund;
        daoFundSharedPercent = _daoFundSharedPercent;
        marketingFund = _marketingFund;
        marketingFundSharedPercent = _marketingFundSharedPercent;
        insuranceFund = _insuranceFund;
        insuranceFundSharedPercent = _insuranceFundSharedPercent;
    }

    function setAllocateSeigniorageSalary(uint256 _allocateSeigniorageSalary)
        external
        onlyOperator
    {
        require(_allocateSeigniorageSalary <= 10000 ether, "too much");
        allocateSeigniorageSalary = _allocateSeigniorageSalary;
    }

    function setDiscountConfig(
        uint256 _maxDiscountRate,
        uint256 _discountPercent
    ) external onlyOperator {
        require(_discountPercent <= 20000, "over 200%");
        maxDiscountRate = _maxDiscountRate;
        discountPercent = _discountPercent;
    }

    function setPremiumConfig(uint256 _maxPremiumRate, uint256 _premiumPercent)
        external
        onlyOperator
    {
        require(_premiumPercent <= 20000, "over 200%");
        maxPremiumRate = _maxPremiumRate;
        premiumPercent = _premiumPercent;
    }

    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt)
        external
        onlyOperator
    {
        require(
            _mintingFactorForPayingDebt >= 10000 &&
                _mintingFactorForPayingDebt <= 20000,
            "out of range"
        ); // [100%, 200%]
        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;
    }

    function setNextSupplyTarget(uint256 _target) external onlyOperator {
        require(_target > IERC20(maintoken).totalSupply(), "too small");
        nextSupplyTarget = _target;
    }

    function setMainTokenLockedAccounts(
        address[] memory _maintokenLockedAccounts
    ) external onlyOperator {
        delete maintokenLockedAccounts;
        uint256 _length = _maintokenLockedAccounts.length;
        for (uint256 i = 0; i < _length; i++) {
            maintokenLockedAccounts.push(_maintokenLockedAccounts[i]);
        }
    }

    function addPegToken(address _token) external onlyOperator {
        require(IERC20(_token).totalSupply() > 0, "invalid token");
        uint256 _ptlength = pegTokens.length;
        for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
            require(pegTokens[_pti] != _token, "Boardroom: existing token");
        }
        pegTokens.push(_token);
    }

    function setPegTokenConfig(
        address _token,
        address _oracle,
        address _pool,
        uint256 _epochStart,
        uint256 _supplyTarget,
        uint256 _expansionPercent
    ) external onlyOperator {
        pegTokenOracle[_token] = _oracle;
        pegTokenFarmingPool[_token] = _pool;
        pegTokenEpochStart[_token] = _epochStart;
        pegTokenSupplyTarget[_token] = _supplyTarget;
        pegTokenMaxSupplyExpansionPercent[_token] = _expansionPercent;
    }

    function setStrategistStatus(address _account, bool _status)
        external
        onlyOperator
    {
        strategist[_account] = _status;
    }

    /* ========== MUTABLE FUNCTIONS ========== */

    function _updatemaintokenPrice() internal {
        try IOracle(maintokenOracle).update() {} catch {}
    }

    function _updatePegTokenPrice(address _token) internal {
        try IOracle(pegTokenOracle[_token]).update() {} catch {}
    }

    function buyBonds(uint256 _maintokenAmount, uint256 targetPrice)
        external
        override
        onlyOneBlock
        checkOperator
        nonReentrant
    {
        require(_maintokenAmount > 0, "zero amount");

        uint256 maintokenPrice = getMainTokenPrice();
        require(maintokenPrice == targetPrice, "price moved");
        require(
            maintokenPrice < maintokenPriceOne, // price < $1
            "maintokenPrice not eligible for bond purchase"
        );

        require(
            _maintokenAmount <= epochSupplyContractionLeft,
            "not enough bond left to purchase"
        );

        uint256 _rate = getBondDiscountRate();
        require(_rate > 0, "invalid bond rate");

        address _maintoken = maintoken;
        uint256 _bondAmount = _maintokenAmount.mul(_rate).div(1e18);
        uint256 _maintokenSupply = IERC20(maintoken).totalSupply();
        uint256 newBondSupply = IERC20(bondtoken).totalSupply().add(
            _bondAmount
        );
        require(
            newBondSupply <=
                _maintokenSupply.mul(maxDebtRatioPercent).div(10000),
            "over max debt ratio"
        );

        IBasisAsset(_maintoken).burnFrom(msg.sender, _maintokenAmount);
        IBasisAsset(bondtoken).mint(msg.sender, _bondAmount);

        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(
            _maintokenAmount
        );
        _updatemaintokenPrice();
        if (regulationStats != address(0))
            IRegulationStats(regulationStats).addBonded(epoch_, _bondAmount);

        emit BoughtBonds(msg.sender, _maintokenAmount, _bondAmount);
    }

    function redeemBonds(uint256 _bondAmount, uint256 targetPrice)
        external
        override
        onlyOneBlock
        checkOperator
        nonReentrant
    {
        require(_bondAmount > 0, "cannot redeem bonds with zero amount");

        uint256 maintokenPrice = getMainTokenPrice();
        require(maintokenPrice == targetPrice, "price moved");
        require(
            maintokenPrice > maintokenPriceCeiling, // price > $1.01
            "maintokenPrice not eligible for bond purchase"
        );

        uint256 _rate = getBondPremiumRate();
        require(_rate > 0, "invalid bond rate");

        uint256 _maintokenAmount = _bondAmount.mul(_rate).div(1e18);
        require(
            IERC20(maintoken).balanceOf(address(this)) >= _maintokenAmount,
            "treasury has no more budget"
        );

        seigniorageSaved = seigniorageSaved.sub(
            Math.min(seigniorageSaved, _maintokenAmount)
        );
        allocateSeigniorageSalary = 10 ether; // 1000 maintoken salary for calling allocateSeigniorage()

        IBasisAsset(bondtoken).burnFrom(msg.sender, _bondAmount);
        IERC20(maintoken).safeTransfer(msg.sender, _maintokenAmount);

        _updatemaintokenPrice();
        if (regulationStats != address(0))
            IRegulationStats(regulationStats).addRedeemed(
                epoch_,
                _maintokenAmount
            );

        emit RedeemedBonds(msg.sender, _maintokenAmount, _bondAmount);
    }

    function _sendToBoardroom(uint256 _amount, uint256 _expanded) internal {
        address _maintoken = maintoken;
        IBasisAsset(_maintoken).mint(address(this), _amount);

        uint256 _daoFundSharedAmount = 0;
        if (daoFundSharedPercent > 0) {
            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);
            IERC20(_maintoken).transfer(daoFund, _daoFundSharedAmount);
        }

        uint256 _marketingFundSharedAmount = 0;
        if (marketingFundSharedPercent > 0) {
            _marketingFundSharedAmount = _amount
                .mul(marketingFundSharedPercent)
                .div(10000);
            IERC20(_maintoken).transfer(
                marketingFund,
                _marketingFundSharedAmount
            );
        }

        uint256 _insuranceFundSharedAmount = 0;
        if (insuranceFundSharedPercent > 0) {
            _insuranceFundSharedAmount = _amount
                .mul(insuranceFundSharedPercent)
                .div(10000);
            IERC20(_maintoken).transfer(
                insuranceFund,
                _insuranceFundSharedAmount
            );
        }

        _amount = _amount
            .sub(_daoFundSharedAmount)
            .sub(_marketingFundSharedAmount)
            .sub(_insuranceFundSharedAmount);

        IERC20(_maintoken).safeIncreaseAllowance(boardroom, _amount);
        IBoardroom(boardroom).allocateSeigniorage(_maintoken, _amount);

        if (regulationStats != address(0))
            IRegulationStats(regulationStats).addEpochInfo(
                epoch_.add(1),
                previousEpochMainTokenPrice,
                _expanded,
                _amount,
                _daoFundSharedAmount,
                _marketingFundSharedAmount,
                _insuranceFundSharedAmount
            );
        emit FundingAdded(
            epoch_.add(1),
            block.timestamp,
            previousEpochMainTokenPrice,
            _expanded,
            _amount,
            _daoFundSharedAmount,
            _marketingFundSharedAmount,
            _insuranceFundSharedAmount
        );
    }

    function allocateSeigniorage()
        external
        onlyOneBlock
        checkEpoch
        checkOperator
        nonReentrant
    {
        _updatemaintokenPrice();
        previousEpochMainTokenPrice = getMainTokenPrice();
        address _maintoken = maintoken;
        uint256 _supply = getMainTokenCirculatingSupply();
        uint256 _nextSupplyTarget = nextSupplyTarget;
        if (_supply >= _nextSupplyTarget) {
            nextSupplyTarget = _nextSupplyTarget.mul(12500).div(10000); // +25%
            maxSupplyExpansionPercent = maxSupplyExpansionPercent.mul(9500).div(
                    10000
                ); // -5%
            if (maxSupplyExpansionPercent < 25) {
                maxSupplyExpansionPercent = 25; // min 0.25%
            }
        }
        uint256 _seigniorage;
        if (epoch_ < bootstrapEpochs) {
            // 28 first epochs with 4.5% expansion
            if (epoch_ == 0) _supply = IERC20(_maintoken).totalSupply();
            _seigniorage = _supply.mul(bootstrapSupplyExpansionPercent).div(
                10000
            );
            _sendToBoardroom(_seigniorage, _seigniorage);
        } else {
            if (previousEpochMainTokenPrice > maintokenPriceCeiling) {
                // Expansion ($maintoken Price > 1 $ETH): there is some seigniorage to be allocated
                uint256 bondSupply = IERC20(bondtoken).totalSupply();
                uint256 _percentage = previousEpochMainTokenPrice.sub(
                    maintokenPriceOne
                );
                uint256 _savedForBond;
                uint256 _savedForBoardroom;
                uint256 _mse = maxSupplyExpansionPercent.mul(1e14);
                if (_percentage > _mse) {
                    _percentage = _mse;
                }
                if (
                    seigniorageSaved >=
                    bondSupply.mul(bondDepletionFloorPercent).div(10000)
                ) {
                    // saved enough to pay debt, mint as usual rate
                    _savedForBoardroom = _seigniorage = _supply
                        .mul(_percentage)
                        .div(1e18);
                } else {
                    // have not saved enough to pay debt, mint more
                    _seigniorage = _supply.mul(_percentage).div(1e18);
                    _savedForBoardroom = _seigniorage
                        .mul(seigniorageExpansionFloorPercent)
                        .div(10000);
                    _savedForBond = _seigniorage.sub(_savedForBoardroom);
                    if (mintingFactorForPayingDebt > 0) {
                        _savedForBond = _savedForBond
                            .mul(mintingFactorForPayingDebt)
                            .div(10000);
                    }
                }
                if (_savedForBoardroom > 0) {
                    _sendToBoardroom(_savedForBoardroom, _seigniorage);
                } else {
                    // function addEpochInfo(uint256 epochNumber, uint256 twap, uint256 expanded, uint256 boardroomFunding, uint256 daoFunding, uint256 marketingFunding, uint256 insuranceFunding) external;
                    if (regulationStats != address(0))
                        IRegulationStats(regulationStats).addEpochInfo(
                            epoch_.add(1),
                            previousEpochMainTokenPrice,
                            0,
                            0,
                            0,
                            0,
                            0
                        );
                    emit FundingAdded(
                        epoch_.add(1),
                        block.timestamp,
                        previousEpochMainTokenPrice,
                        0,
                        0,
                        0,
                        0,
                        0
                    );
                }
                if (_savedForBond > 0) {
                    seigniorageSaved = seigniorageSaved.add(_savedForBond);
                    IBasisAsset(_maintoken).mint(address(this), _savedForBond);
                    emit TreasuryFunded(block.timestamp, _savedForBond);
                }
            } else if (previousEpochMainTokenPrice < maintokenPriceOne) {
                if (regulationStats != address(0))
                    IRegulationStats(regulationStats).addEpochInfo(
                        epoch_.add(1),
                        previousEpochMainTokenPrice,
                        0,
                        0,
                        0,
                        0,
                        0
                    );
                emit FundingAdded(
                    epoch_.add(1),
                    block.timestamp,
                    previousEpochMainTokenPrice,
                    0,
                    0,
                    0,
                    0,
                    0
                );
            }
        }
        if (allocateSeigniorageSalary > 0) {
            IBasisAsset(_maintoken).mint(
                address(msg.sender),
                allocateSeigniorageSalary
            );
        }
        if (multiPegEnabled) {
            uint256 _ptlength = pegTokens.length;
            for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
                address _pegToken = pegTokens[_pti];
                uint256 _epochStart = pegTokenEpochStart[_pegToken];
                if (_epochStart > 0 && _epochStart <= epoch_.add(1)) {
                    // _updatePegTokenPrice(_pegToken);
                    _allocateSeignioragePegToken(epoch_, _pegToken);
                }
            }
        }
    }

    function _allocateSeignioragePegToken(uint256 _epoch, address _pegToken)
        internal
    {
        if (hasAllocatedPegToken[_epoch.add(1)][_pegToken]) return; // skip
        hasAllocatedPegToken[_epoch.add(1)][_pegToken] = true;
        uint256 _supply = getCirculatingSupply(_pegToken);
        if (_supply >= pegTokenSupplyTarget[_pegToken]) {
            pegTokenSupplyTarget[_pegToken] = pegTokenSupplyTarget[_pegToken]
                .mul(12500)
                .div(10000); // +25%
            pegTokenMaxSupplyExpansionPercent[
                _pegToken
            ] = pegTokenMaxSupplyExpansionPercent[_pegToken].mul(9500).div(
                10000
            ); // -5%
            if (pegTokenMaxSupplyExpansionPercent[_pegToken] < 1000) {
                pegTokenMaxSupplyExpansionPercent[_pegToken] = 1000; // min 0.1%
            }
        }
        uint256 _pegTokenTwap = getPegTokenPrice(_pegToken);
        if (_pegTokenTwap > maintokenPriceCeiling) {
            uint256 _percentage = _pegTokenTwap.sub(maintokenPriceOne); // 1% = 1e16
            uint256 _mse = pegTokenMaxSupplyExpansionPercent[_pegToken].mul(
                1e12
            ); // 10000 = 1%
            if (_percentage > _mse) {
                _percentage = _mse;
            }
            uint256 _expanded = _supply.mul(_percentage).div(1e18);
            uint256 _daoFundSharedAmount = 0;
            uint256 _marketingFundSharedAmount = 0;
            uint256 _insuranceFundSharedAmount = 0;
            uint256 _boardroomAmount = 0;
            if (_expanded > 0) {
                IBasisAsset(_pegToken).mint(address(this), _expanded);

                if (daoFundSharedPercent > 0) {
                    _daoFundSharedAmount = _expanded
                        .mul(daoFundSharedPercent)
                        .div(10000);
                    IERC20(_pegToken).transfer(daoFund, _daoFundSharedAmount);
                }

                if (marketingFundSharedPercent > 0) {
                    _marketingFundSharedAmount = _expanded
                        .mul(marketingFundSharedPercent)
                        .div(10000);
                    IERC20(_pegToken).transfer(
                        marketingFund,
                        _marketingFundSharedAmount
                    );
                }

                if (insuranceFundSharedPercent > 0) {
                    _insuranceFundSharedAmount = _expanded
                        .mul(insuranceFundSharedPercent)
                        .div(10000);
                    IERC20(_pegToken).transfer(
                        insuranceFund,
                        _insuranceFundSharedAmount
                    );
                }

                _boardroomAmount = _expanded
                    .sub(_daoFundSharedAmount)
                    .sub(_marketingFundSharedAmount)
                    .sub(_insuranceFundSharedAmount);

                IERC20(_pegToken).safeIncreaseAllowance(
                    boardroom,
                    _boardroomAmount
                );
                IBoardroom(boardroom).allocateSeigniorage(
                    _pegToken,
                    _boardroomAmount
                );
            }

            if (regulationStats != address(0))
                IRegulationStats(regulationStats).addPegEpochInfo(
                    _pegToken,
                    _epoch.add(1),
                    _pegTokenTwap,
                    _expanded,
                    _boardroomAmount,
                    _daoFundSharedAmount,
                    _marketingFundSharedAmount,
                    _insuranceFundSharedAmount
                );

            emit PegTokenFundingAdded(
                _pegToken,
                _epoch.add(1),
                block.timestamp,
                _pegTokenTwap,
                _expanded,
                _boardroomAmount,
                _daoFundSharedAmount,
                _marketingFundSharedAmount,
                _insuranceFundSharedAmount
            );
        }
    }

    /**
     * @dev should call this after the main function allocateSeigniorage()
     */
    function governanceAllocateSeignioragePegToken(address _pegToken)
        public
        onlyStrategist
    {
        _updatePegTokenPrice(_pegToken);
        uint256 _epoch = (epoch_ == 0) ? 0 : epoch_.sub(1);
        _allocateSeignioragePegToken(_epoch, _pegToken);
    }

    function governanceAllocateSeigniorageForAllPegTokens() external {
        uint256 _ptlength = pegTokens.length;
        for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
            address _pegToken = pegTokens[_pti];
            uint256 _epochStart = pegTokenEpochStart[_pegToken];
            if (_epochStart > 0 && _epochStart <= epoch_) {
                governanceAllocateSeignioragePegToken(_pegToken);
            }
        }
    }

    function governanceRecoverUnsupported(
        IERC20 _token,
        uint256 _amount,
        address _to
    ) external onlyOperator {
        // do not allow to drain core tokens
        require(address(_token) != address(maintoken), "maintoken");
        require(address(_token) != address(bondtoken), "bond");
        _token.safeTransfer(_to, _amount);
    }

    function tokenTransferOperator(address _token, address _operator)
        external
        onlyOperator
    {
        IBasisAsset(_token).transferOperator(_operator);
    }

    function boardroomSetOperator(address _operator) external onlyOperator {
        IBoardroom(boardroom).setOperator(_operator);
    }

    function boardroomGovernanceRecoverUnsupported(
        address _boardRoomOrToken,
        address _token,
        uint256 _amount,
        address _to
    ) external onlyOperator {
        IBoardroom(_boardRoomOrToken).governanceRecoverUnsupported(
            _token,
            _amount,
            _to
        );
    }
}
