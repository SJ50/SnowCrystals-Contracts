// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./access/Operator.sol";
import "../interfaces/IOracle.sol";
import "../interfaces/ILiquidityFund.sol";

contract Lion is ERC20Burnable, Operator {
    // using SafeMath8 for uint8;
    // using SafeMath for uint256;

    // Initial distribution for the MMF launchpad
    uint256 public constant INITIAL_LAUNCHPAD_DISTRIBUTION = 400000 ether;

    /* ================= Taxation =============== */
    // Address of the Oracle
    address public oracle;
    // Address of the Tax Office
    address public taxOffice;

    // Current tax rate
    uint256 public taxRate;
    // Indicates tax should be burned
    bool public burnTax = true;
    // Price threshold below which taxes will get burned
    uint256 public burnThreshold = 1.10e18;
    // Address of the tax collector wallet
    address public taxCollectorAddress;

    // Should the taxes be calculated using the tax tiers
    bool public autoCalculateTax;

    // Tax Tiers
    uint256[] public taxTiersTwaps = [
        0,
        5e17,
        6e17,
        7e17,
        8e17,
        9e17,
        9.5e17,
        1e18,
        1.05e18,
        1.10e18,
        1.20e18,
        1.30e18,
        1.40e18,
        1.50e18
    ];
    uint256[] public taxTiersRates = [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
    ];

    // Sender addresses excluded from Tax
    mapping(address => bool) public excludedAddresses;

    bool public openTrading = false;
    mapping(address => bool) public whitelistAddresses;

    event TaxOfficeTransferred(address oldAddress, address newAddress);

    modifier onlyTaxOffice() {
        require(taxOffice == msg.sender, "Caller is not the tax office");
        _;
    }

    modifier onlyOperatorOrTaxOffice() {
        require(
            isOperator() || taxOffice == msg.sender,
            "Caller is not the operator or the tax office"
        );
        _;
    }

    /**
     * @notice Constructs the LION ERC-20 contract.
     */
    constructor(uint256 _taxRate, address _taxCollectorAddress)
        public
        ERC20("LION", "LION")
    {
        require(_taxRate <= 100, "tax equal or bigger to 1%");
        require(
            _taxCollectorAddress != address(0),
            "tax collector address must be non-zero address"
        );

        excludeAddress(msg.sender);
        whitelistAddresses[msg.sender] = true;

        taxRate = _taxRate;
        taxCollectorAddress = _taxCollectorAddress;

        _mint(msg.sender, INITIAL_LAUNCHPAD_DISTRIBUTION + 1 ether);
    }

    /* ============= Taxation ============= */

    function getTaxTiersTwapsCount() public view returns (uint256 count) {
        return taxTiersTwaps.length;
    }

    function getTaxTiersRatesCount() public view returns (uint256 count) {
        return taxTiersRates.length;
    }

    function isAddressExcluded(address _address) public view returns (bool) {
        return excludedAddresses[_address];
    }

    function setTaxTiersTwap(uint8 _index, uint256 _value)
        public
        onlyTaxOffice
        returns (bool)
    {
        require(_index >= 0, "Index has to be higher than 0");
        require(
            _index < getTaxTiersTwapsCount(),
            "Index has to lower than count of tax tiers"
        );
        if (_index > 0) {
            require(_value > taxTiersTwaps[_index - 1]);
        }
        if (_index < getTaxTiersTwapsCount() - (1)) {
            require(_value < taxTiersTwaps[_index + 1]);
        }
        taxTiersTwaps[_index] = _value;
        return true;
    }

    function setTaxTiersRate(uint8 _index, uint256 _value)
        public
        onlyTaxOffice
        returns (bool)
    {
        require(_index >= 0, "Index has to be higher than 0");
        require(
            _index < getTaxTiersRatesCount(),
            "Index has to lower than count of tax tiers"
        );
        taxTiersRates[_index] = _value;
        return true;
    }

    function setBurnThreshold(uint256 _burnThreshold)
        public
        onlyTaxOffice
        returns (bool)
    {
        burnThreshold = _burnThreshold;
    }

    function _getLionPrice() internal view returns (uint256 _lionPrice) {
        try IOracle(oracle).consult(address(this), 1e18) returns (
            uint144 _price
        ) {
            return uint256(_price);
        } catch {
            revert("Lion: failed to fetch LION price from Oracle");
        }
    }

    function _updateTaxRate(uint256 _lionPrice) internal returns (uint256) {
        if (autoCalculateTax) {
            for (
                uint8 tierId = uint8(getTaxTiersTwapsCount()) - (1);
                tierId >= 0;
                --tierId
            ) {
                if (_lionPrice >= taxTiersTwaps[tierId]) {
                    require(
                        taxTiersRates[tierId] < 500,
                        "tax equal or bigger to 5%"
                    );
                    taxRate = taxTiersRates[tierId];
                    return taxTiersRates[tierId];
                }
            }
        }
    }

    function enableAutoCalculateTax() public onlyTaxOffice {
        autoCalculateTax = true;
    }

    function disableAutoCalculateTax() public onlyTaxOffice {
        autoCalculateTax = false;
    }

    function setOracle(address _oracle) public onlyOperatorOrTaxOffice {
        require(_oracle != address(0), "oracle address cannot be 0 address");
        oracle = _oracle;
    }

    function setTaxOffice(address _taxOffice) public onlyOperatorOrTaxOffice {
        require(
            _taxOffice != address(0),
            "tax office address cannot be 0 address"
        );
        emit TaxOfficeTransferred(taxOffice, _taxOffice);
        taxOffice = _taxOffice;
    }

    function setTaxCollectorAddress(address _taxCollectorAddress)
        public
        onlyTaxOffice
    {
        require(
            _taxCollectorAddress != address(0),
            "tax collector address must be non-zero address"
        );
        taxCollectorAddress = _taxCollectorAddress;
    }

    function setTaxRate(uint256 _taxRate) public onlyTaxOffice {
        require(!autoCalculateTax, "auto calculate tax cannot be enabled");
        require(_taxRate < 500, "tax equal or bigger to 5%");
        taxRate = _taxRate;
    }

    function setBurnTax(bool _burnTax) public onlyTaxOffice {
        burnTax = _burnTax;
    }

    function excludeAddress(address _address)
        public
        onlyOperatorOrTaxOffice
        returns (bool)
    {
        require(!excludedAddresses[_address], "address can't be excluded");
        excludedAddresses[_address] = true;
        return true;
    }

    function includeAddress(address _address)
        public
        onlyOperatorOrTaxOffice
        returns (bool)
    {
        require(excludedAddresses[_address], "address can't be included");
        excludedAddresses[_address] = false;
        return true;
    }

    function OpenTrade() external onlyOperatorOrTaxOffice {
        require(!openTrading, "Trade already opened.");
        openTrading = true;
    }

    function includeToWhitelist(address _address)
        public
        onlyOperatorOrTaxOffice
        returns (bool)
    {
        require(!whitelistAddresses[_address], "address can't be included");
        whitelistAddresses[_address] = true;
        return true;
    }

    function excludeFromWhitlist(address _address)
        public
        onlyOperatorOrTaxOffice
        returns (bool)
    {
        require(whitelistAddresses[_address], "address can't be excluded");
        whitelistAddresses[_address] = false;
        return true;
    }

    /**
     * @notice Operator mints LION to a recipient
     * @param recipient_ The address of recipient
     * @param amount_ The amount of LION to mint to
     * @return whether the process has been done
     */
    function mint(address recipient_, uint256 amount_)
        public
        onlyOperator
        returns (bool)
    {
        uint256 balanceBefore = balanceOf(recipient_);
        _mint(recipient_, amount_);
        uint256 balanceAfter = balanceOf(recipient_);

        return balanceAfter > balanceBefore;
    }

    function burn(uint256 amount) public override {
        super.burn(amount);
    }

    function burnFrom(address account, uint256 amount)
        public
        override
        onlyOperator
    {
        super.burnFrom(account, amount);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        uint256 currentTaxRate = taxRate;
        bool _burnTax = burnTax;

        if (autoCalculateTax) {
            uint256 currentLionPrice = _getLionPrice();
            currentTaxRate = _updateTaxRate(currentLionPrice);
            if (currentLionPrice < burnThreshold) {
                _burnTax = true;
            }
        }

        if (currentTaxRate == 0 || excludedAddresses[sender]) {
            _transfer(sender, recipient, amount);
        } else {
            _transferWithTax(sender, recipient, amount, _burnTax);
        }

        _approve(
            sender,
            _msgSender(),
            allowance(sender, _msgSender()) - amount
        );
        return true;
    }

    function _transferWithTax(
        address sender,
        address recipient,
        uint256 amount,
        bool _burnTax
    ) internal returns (bool) {
        uint256 taxAmount = (amount * (taxRate)) / (10000);
        uint256 amountAfterTax = amount - (taxAmount);

        if (_burnTax) {
            // Burn tax
            _burn(sender, taxAmount);
        } else {
            // Transfer tax to tax collector
            _transfer(sender, taxCollectorAddress, taxAmount);
        }

        // Transfer amount after tax to recipient
        _transfer(sender, recipient, amountAfterTax);

        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual override {
        require(openTrading || whitelistAddresses[sender], "Trade not opened");
        super._transfer(sender, recipient, amount);
    }

    function governanceRecoverUnsupported(
        IERC20 _token,
        uint256 _amount,
        address _to
    ) external onlyOperator {
        _token.transfer(_to, _amount);
    }
}
