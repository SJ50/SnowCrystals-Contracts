// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

uint256 constant numTokensSellToAddToLiquidity = 10000;
uint256 constant _maxTxAmount = 100000;
bool constant inSwapAndLiquify = false;
bool constant swapAndLiquifyEnabled = false;

function _transferStandard(
    address sender,
    address recipient,
    uint256 tAmount
) private {
    require(
        balanceOf(msg.sender) >= tAmount,
        "Insuficient balance for transaction."
    );
    (uint256 tTransferAmount, uint256 liqfee, uint256 azfee) = _getValues(
        tAmount
    );
    uint256 contractTokenBalance = balanceOf_token(address(this));

    if (contractTokenBalance >= _maxTxAmount) {
        contractTokenBalance = _maxTxAmount;
    }

    bool overMinTokenBalance = contractTokenBalance >=
        numTokensSellToAddToLiquidity;
    if (
        overMinTokenBalance &&
        !inSwapAndLiquify &&
        sender != uniswapV2Pair &&
        swapAndLiquifyEnabled
    ) {
        _tOwned[address(this)] = numTokensSellToAddToLiquidity;
        //add liquidity - this function runs
        swapAndLiquify(_tOwned[address(this)]);
    }

    _tOwned[msg.sender] -= tAmount;
    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
    _tOwned[devWallet] = _tOwned[devWallet].add(azfee);
    _tOwned[address(this)] = _tOwned[address(this)].add(liqfee);
    emit Transfer(sender, recipient, tTransferAmount);
}

function swapAndLiquify(uint256 contractTokenBalance) private {
    uint256 half = contractTokenBalance.div(2);
    uint256 otherHalf = contractTokenBalance.sub(half);
    //Function below, balanceOf_token retrieves tokens mapped to the address.
    uint256 initialBalance = balanceOf_token(address(this));
    //Function below results in error
    swapTokensForEth(half);

    /*uint256 newBalance = _tOwned[address(this)].sub(initialBalance);
    addLiquidity(otherHalf, newBalance);
    emit SwapAndLiquify(half, newBalance, otherHalf);*/
}

receive() external payable {}

function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
    swapAndLiquifyEnabled = _enabled;
    emit SwapAndLiquifyEnabledUpdated(_enabled);
}

function swapTokensForEth(uint256 tokenAmount) private {
    // generate the uniswap pair path of token -> weth
    address[] memory path = new address[](2);
    path[0] = address(this);
    path[1] = uniswapV2Router.WETH();
    _approve(address(this), address(uniswapV2Router), tokenAmount);
    // make the swap
    // Pools for each token of the pair must exist and have liquidity
    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
        tokenAmount,
        0, // accept any amount of ETH
        path,
        address(this),
        block.timestamp
    );
}

function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
    // approve token transfer to cover all possible scenarios
    _approve(address(this), address(uniswapV2Router), tokenAmount);

    // add the liquidity
    uniswapV2Router.addLiquidityETH{value: ethAmount}(
        address(this),
        tokenAmount,
        0, // slippage is unavoidable
        0, // slippage is unavoidable
        myWallet,
        block.timestamp
    );
}
