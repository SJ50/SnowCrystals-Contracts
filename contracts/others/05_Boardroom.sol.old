/**
 *Submitted for verification at cronoscan.com on 2022-06-19
 */

// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";

import "./utils/ShareWrapper.sol";
import "./utils/ContractGuard.sol";
import "../interfaces/IBasisAsset.sol";
import "../interfaces/ITreasury.sol";
import "../interfaces/IpegBoardroom.sol";

// support multi-pegs
contract OneBoardroom is ShareWrapper, ContractGuard {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /* ========== DATA STRUCTURES ========== */

    struct Memberseat {
        uint256 lastSnapshotIndex;
        uint256 rewardEarned;
    }

    struct BoardroomSnapshot {
        uint256 time;
        uint256 rewardReceived;
        uint256 rewardPerShare;
    }

    /* ========== STATE VARIABLES ========== */

    // governance
    address public operator;

    // flags
    bool public initialized = false;

    IERC20 public maintoken;
    IERC20 public pegtoken;
    IERC20 public paytoken; // second collateral
    ITreasury public treasury;
    address public insuranceFund;
    address public mainTokenOracle;

    //    mapping(address => Memberseat) public members;
    //    BoardroomSnapshot[] public boardroomHistory;

    mapping(address => mapping(address => Memberseat)) public members; // pegToken => _member => Memberseat
    mapping(address => uint256) public timers; // start deposit time for each members
    mapping(address => BoardroomSnapshot[]) public boardroomHistory; // pegToken => BoardroomSnapshot history

    uint256 public withdrawLockupEpochs;
    uint256 public rewardLockupEpochs;

    uint256 public minCollateralPercent;
    uint256 public maxCollateralPercent;
    uint256 public paytokenCollateralDiscountPercent;
    uint256 public maintokenTokenSupplyTarget;
    address[] public pegTokens;
    bool isSacrificeReward;
    mapping(address => address) public pegOriginalTokenOracle;

    /* =================== Added variables (need to keep orders for proxy to work) =================== */

    /* ========== EVENTS ========== */

    event Initialized(address indexed executor, uint256 at);
    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event RewardPaid(
        address indexed token,
        address indexed user,
        uint256 reward
    );
    event RewardAdded(
        address indexed token,
        address indexed user,
        uint256 reward
    );
    event RewardSacrificed(
        address indexed token,
        address indexed user,
        uint256 reward
    );

    /* ========== Modifiers =============== */

    modifier onlyOperator() {
        require(
            operator == msg.sender,
            "Boardroom: caller is not the operator"
        );
        _;
    }

    modifier onlyTreasury() {
        require(
            address(treasury) == msg.sender || operator == msg.sender,
            "Boardroom: caller is not the treasury"
        );
        _;
    }

    modifier memberExists() {
        require(
            balanceOf(msg.sender) > 0,
            "Boardroom: The member does not exist"
        );
        _;
    }

    modifier updateReward(address _member) {
        uint256 _ptlength = pegTokens.length;
        for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
            address _token = pegTokens[_pti];
            Memberseat memory seat = members[_token][_member];
            seat.rewardEarned = earned(_token, _member);
            seat.lastSnapshotIndex = latestSnapshotIndex(_token);
            members[_token][_member] = seat;
        }
        _;
    }

    modifier notInitialized() {
        require(!initialized, "Boardroom: already initialized");
        _;
    }

    /* ========== GOVERNANCE ========== */

    function initialize(
        IERC20 _maintoken,
        IERC20 _share,
        IERC20 _pegtoken,
        IERC20 _paytoken,
        ITreasury _treasury,
        address _insuranceFund
    ) public notInitialized {
        maintoken = _maintoken; // snow
        share = _share; // glcr

        pegtoken = _pegtoken; // sbond for collateral
        paytoken = _paytoken; // usdc for collateral
        treasury = _treasury;
        insuranceFund = _insuranceFund;

        withdrawLockupEpochs = 8; // Lock for 9 epochs (72h) before release withdraw
        rewardLockupEpochs = 4;

        minCollateralPercent = 0; // 0%
        maxCollateralPercent = 0; // 0%

        withdrawFee = 0;
        stakeFee = 0;

        paytokenCollateralDiscountPercent = 0; // 20% discount if pay by PAYTOKEN
        maintokenTokenSupplyTarget = 10000000 ether;
        isSacrificeReward = true;
        initialized = true;
        operator = msg.sender;
        emit Initialized(msg.sender, block.number);
    }

    function setOperator(address _operator) external onlyOperator {
        operator = _operator;
    }

    function setPAYTOKEN(IERC20 _paytoken) external onlyOperator {
        paytoken = _paytoken;
    }

    function setTreasury(ITreasury _treasury) external onlyOperator {
        require(address(_treasury) != address(0), "zero");
        treasury = _treasury;
    }

    function setInsuranceFund(address _insuranceFund) external onlyOperator {
        require(_insuranceFund != address(0), "zero");
        insuranceFund = _insuranceFund;
    }

    function setLockUp(
        uint256 _withdrawLockupEpochs,
        uint256 _rewardLockupEpochs
    ) external onlyOperator {
        require(
            _withdrawLockupEpochs <= 42,
            "_withdrawLockupEpochs: out of range"
        ); // <= 2 week
        require(rewardLockupEpochs <= 21, "rewardLockupEpochs: out of range"); // <= 1 week
        require(
            rewardLockupEpochs < _withdrawLockupEpochs,
            "rewardLockupEpochs: out of range"
        ); // <= 1 week
        rewardLockupEpochs = _rewardLockupEpochs;
        withdrawLockupEpochs = _withdrawLockupEpochs;
    }

    function addPegToken(address _token) external onlyOperator {
        require(IERC20(_token).totalSupply() > 0, "Boardroom: invalid token");
        uint256 _ptlength = pegTokens.length;
        for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
            require(pegTokens[_pti] != _token, "Boardroom: existing token");
        }
        require(
            boardroomHistory[_token].length == 0,
            "Boardroom: boardroomHistory exists"
        );
        BoardroomSnapshot memory genesisSnapshot = BoardroomSnapshot({
            time: block.number,
            rewardReceived: 0,
            rewardPerShare: 0
        });
        boardroomHistory[_token].push(genesisSnapshot);
        pegTokens.push(_token);
    }

    function setPegTokenConfig(address _token, address _oracle)
        external
        onlyOperator
    {
        pegOriginalTokenOracle[_token] = _oracle;
    }

    function setReserveFund(address _reserveFund) external onlyOperator {
        _setReserveFund(_reserveFund);
    }

    function setStakeFee(uint256 _stakeFee) external onlyOperator {
        _setStakeFee(_stakeFee);
    }

    function setMainTokenOracle(address _mainTokenOracle)
        external
        onlyOperator
    {
        mainTokenOracle = _mainTokenOracle;
    }

    function setMinCollateralPercent(uint256 _minCollateralPercent)
        external
        onlyOperator
    {
        require(_minCollateralPercent <= 3500, "too high"); // <= 35%
        minCollateralPercent = _minCollateralPercent;
    }

    function setMaxCollateralPercent(uint256 _maxCollateralPercent)
        external
        onlyOperator
    {
        require(_maxCollateralPercent >= 6500, "too low"); // >= 65%
        maxCollateralPercent = _maxCollateralPercent;
    }

    function setPAYTOKENCollateralDiscountPercent(
        uint256 _paytokenCollateralDiscountPercent
    ) external onlyOperator {
        require(_paytokenCollateralDiscountPercent <= 5000, "too high"); // <= 50%
        paytokenCollateralDiscountPercent = _paytokenCollateralDiscountPercent;
    }

    function setMainTokenTokenSupplyTarget(uint256 _maintokenTokenSupplyTarget)
        external
        onlyOperator
    {
        require(_maintokenTokenSupplyTarget >= 100000000 ether, "too low"); // >= 100 million MAINTOKEN
        maintokenTokenSupplyTarget = _maintokenTokenSupplyTarget;
    }

    function setWithdrawFee(uint256 _withdrawFee) external onlyOperator {
        _setWithdrawFee(_withdrawFee);
    }

    /* ========== VIEW FUNCTIONS ========== */

    // =========== Snapshot getters

    function latestSnapshotIndex(address _token) public view returns (uint256) {
        return boardroomHistory[_token].length.sub(1);
    }

    function getLatestSnapshot(address _token)
        internal
        view
        returns (BoardroomSnapshot memory)
    {
        return boardroomHistory[_token][latestSnapshotIndex(_token)];
    }

    function getLastSnapshotIndexOf(address token, address member)
        public
        view
        returns (uint256)
    {
        return members[token][member].lastSnapshotIndex;
    }

    function getLastSnapshotOf(address token, address member)
        internal
        view
        returns (BoardroomSnapshot memory)
    {
        return boardroomHistory[token][getLastSnapshotIndexOf(token, member)];
    }

    function canClaimReward(address member) external view returns (bool) {
        return timers[member].add(rewardLockupEpochs) <= treasury.epoch();
        // return true;
        // ITreasury _treasury = ITreasury(treasury);
        // return _treasury.previousEpochMainTokenPrice() >= 1e18 && _treasury.getNextExpansionRate() > 0; // current epoch and next epoch are both expansion
    }

    function getCollateralPercent()
        public
        view
        returns (uint256 _collateralPercent)
    {
        uint256 _maintokenSupply = maintoken.totalSupply();
        uint256 _maintokenTokenSupplyTarget = maintokenTokenSupplyTarget;
        if (_maintokenSupply >= _maintokenTokenSupplyTarget) {
            _collateralPercent = maxCollateralPercent;
        } else {
            _collateralPercent = _maintokenSupply.mul(10000).div(
                _maintokenTokenSupplyTarget
            );
            if (_collateralPercent > maxCollateralPercent) {
                _collateralPercent = maxCollateralPercent;
            } else if (_collateralPercent < minCollateralPercent) {
                _collateralPercent = minCollateralPercent;
            }
        }
    }

    function canWithdraw(address member) external view returns (bool) {
        return timers[member].add(withdrawLockupEpochs) <= treasury.epoch();
    }

    function epoch() external view returns (uint256) {
        return treasury.epoch();
    }

    function nextEpochPoint() external view returns (uint256) {
        return treasury.nextEpochPoint();
    }

    function getPegTokenPrice(address _token) external view returns (uint256) {
        return treasury.getPegTokenPrice(_token);
    }

    function getPegTokenUpdatedPrice(address _token)
        external
        view
        returns (uint256)
    {
        return treasury.getPegTokenUpdatedPrice(_token);
    }

    function getMainTokenverPegTokenPrice() public view returns (uint256) {
        return
            (mainTokenOracle == address(0))
                ? 1e18
                : uint256(IEpoch(mainTokenOracle).getPegPriceUpdated());
    }

    function getPegOriginalTokenOverPegTokenPrice(address _token)
        public
        view
        returns (uint256)
    {
        address _oracle = pegOriginalTokenOracle[_token];
        return
            (_oracle == address(0))
                ? 1e18
                : uint256(IEpoch(_oracle).getPegPriceUpdated());
    }

    // =========== Member getters

    function rewardPerShare(address _token) public view returns (uint256) {
        return getLatestSnapshot(_token).rewardPerShare;
    }

    function earned(address _token, address _member)
        public
        view
        returns (uint256)
    {
        uint256 latestRPS = getLatestSnapshot(_token).rewardPerShare;
        uint256 storedRPS = getLastSnapshotOf(_token, _member).rewardPerShare;

        return
            balanceOf(_member).mul(latestRPS.sub(storedRPS)).div(1e18).add(
                members[_token][_member].rewardEarned
            );
    }

    function numOfPegTokens() public view returns (uint256) {
        return pegTokens.length;
    }

    function earnedAllPegTokens(address _member)
        external
        view
        returns (
            uint256 _numOfPegTokens,
            address[] memory _pegTokenAddresses,
            uint256[] memory _earnedPegTokens
        )
    {
        _numOfPegTokens = numOfPegTokens();
        _pegTokenAddresses = new address[](_numOfPegTokens);
        _earnedPegTokens = new uint256[](_numOfPegTokens);
        for (uint256 i = 0; i < _numOfPegTokens; i++) {
            _pegTokenAddresses[i] = pegTokens[i];
            _earnedPegTokens[i] = earned(_pegTokenAddresses[i], _member);
        }
    }

    function getCollateralForClaimAllPegTokens(address _token, address _member)
        public
        view
        returns (uint256)
    {
        uint256 _earned = earned(_token, _member);
        uint256 _price = getPegOriginalTokenOverPegTokenPrice(_token);
        uint256 _collateralPercent = getCollateralPercent();
        return _earned.mul(_price).mul(_collateralPercent).div(1e22); // 1e18 * 10000
    }

    function getCollateralForClaimAllPegTokens(address _member)
        public
        view
        returns (
            uint256 _numOfPegTokens,
            address[] memory _pegTokenAddresses,
            uint256[] memory _earnedPegTokens,
            uint256[] memory _collateralForPegTokens,
            uint256 _totalCollateral,
            uint256 _totalPAYTOKENCollateral
        )
    {
        _numOfPegTokens = numOfPegTokens();
        _pegTokenAddresses = new address[](_numOfPegTokens);
        _earnedPegTokens = new uint256[](_numOfPegTokens);
        _collateralForPegTokens = new uint256[](_numOfPegTokens);
        uint256 _collateralPercent = getCollateralPercent();
        for (uint256 i = 0; i < _numOfPegTokens; i++) {
            address _token = pegTokens[i];
            uint256 _earned = earned(_token, _member);
            _pegTokenAddresses[i] = _token;
            _earnedPegTokens[i] = _earned;
            uint256 _price = getPegOriginalTokenOverPegTokenPrice(_token);
            uint256 _collateral = _earned
                .mul(_price)
                .mul(_collateralPercent)
                .div(1e22);
            _collateralForPegTokens[i] = _collateral;
            _totalCollateral = _totalCollateral.add(_collateral);
        }
        _totalPAYTOKENCollateral = _totalCollateral.mul(1e18).div(
            getMainTokenverPegTokenPrice()
        );
        _totalPAYTOKENCollateral = _totalPAYTOKENCollateral.sub(
            _totalPAYTOKENCollateral.mul(paytokenCollateralDiscountPercent).div(
                10000
            )
        ); // sub discount
    }

    function getTotalCollateralForClaimAllPegTokens(address _member)
        public
        view
        returns (uint256 _totalCollateral)
    {
        uint256 _numOfPegTokens = pegTokens.length;
        for (uint256 i = 0; i < _numOfPegTokens; i++) {
            address _token = pegTokens[i];
            uint256 _earned = earned(_token, _member);
            uint256 _price = getPegOriginalTokenOverPegTokenPrice(_token);
            uint256 _collateral = _earned.mul(_price).div(1e18);
            _totalCollateral = _totalCollateral.add(_collateral);
        }
        uint256 _collateralPercent = getCollateralPercent();
        _totalCollateral = _totalCollateral.mul(_collateralPercent).div(10000);
    }

    function getTotalPAYTOKENCollateralForClaimAllPegTokens(address _member)
        public
        view
        returns (uint256 _totalPAYTOKENCollateral)
    {
        uint256 _totalCollateral = getTotalCollateralForClaimAllPegTokens(
            _member
        );
        _totalPAYTOKENCollateral = _totalCollateral.mul(1e18).div(
            getMainTokenverPegTokenPrice()
        );
        _totalPAYTOKENCollateral = _totalPAYTOKENCollateral.sub(
            _totalPAYTOKENCollateral.mul(paytokenCollateralDiscountPercent).div(
                10000
            )
        ); // sub discount
    }

    /* ========== MUTATIVE FUNCTIONS ========== */

    function stake(uint256 amount)
        public
        override
        onlyOneBlock
        updateReward(msg.sender)
    {
        require(amount > 0, "Boardroom: Cannot stake 0");
        super.stake(amount);
        timers[msg.sender] = treasury.epoch();
        // reset timer
        emit Staked(msg.sender, amount);
    }

    function withdraw(uint256 amount)
        public
        override
        onlyOneBlock
        memberExists
        updateReward(msg.sender)
    {
        require(amount > 0, "Boardroom: Cannot withdraw 0");
        require(
            timers[msg.sender].add(withdrawLockupEpochs) <= treasury.epoch(),
            "Boardroom: still in withdraw lockup"
        );
        if (isSacrificeReward == true) _sacrificeReward();
        else _claimReward();
        super.withdraw(amount);
        emit Withdrawn(msg.sender, amount);
    }

    function exit() external {
        withdraw(balanceOf(msg.sender));
    }

    function _sacrificeReward() internal updateReward(msg.sender) {
        uint256 _ptlength = pegTokens.length;
        for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
            address _token = pegTokens[_pti];
            uint256 reward = members[_token][msg.sender].rewardEarned;
            IBasisAsset(_token).burn(reward);
            members[_token][msg.sender].rewardEarned = 0;
            emit RewardSacrificed(_token, msg.sender, reward);
        }
    }

    function claimReward() external onlyOneBlock {
        require(
            timers[msg.sender].add(rewardLockupEpochs) <= treasury.epoch(),
            "!claim"
        );
        _claimReward();
    }

    function _claimReward() internal updateReward(msg.sender) {
        uint256 _reward = members[address(maintoken)][msg.sender].rewardEarned;
        // if (_reward > 0) {
        //     if (_usePAYTOKENCollateral) {
        //         paytoken.safeTransferFrom(
        //             msg.sender,
        //             insuranceFund,
        //             getTotalPAYTOKENCollateralForClaimAllPegTokens(msg.sender)
        //         );
        //     } else {
        //         pegtoken.safeTransferFrom(
        //             msg.sender,
        //             insuranceFund,
        //             getTotalCollateralForClaimAllPegTokens(msg.sender)
        //         );
        //     }
        // }
        timers[msg.sender] = treasury.epoch(); // reset timer
        uint256 _ptlength = pegTokens.length;
        for (uint256 _pti = 0; _pti < _ptlength; ++_pti) {
            address _token = pegTokens[_pti];
            _reward = members[_token][msg.sender].rewardEarned;
            IERC20(_token).safeTransfer(msg.sender, _reward);
            members[_token][msg.sender].rewardEarned = 0;
            emit RewardPaid(_token, msg.sender, _reward);
        }
    }

    function allocateSeigniorage(address _token, uint256 _amount)
        external
        onlyTreasury
    {
        require(_amount > 0, "Boardroom: Cannot allocate 0");
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        uint256 _totalSupply = totalSupply();
        require(
            _totalSupply > 0,
            "Boardroom: Cannot allocate when totalSupply is 0"
        );
        require(
            boardroomHistory[_token].length > 0,
            "Boardroom: Cannot allocate when boardroomHistory is empty"
        );

        // Create & add new snapshot
        uint256 prevRPS = getLatestSnapshot(_token).rewardPerShare;
        uint256 nextRPS = prevRPS.add(_amount.mul(1e18).div(_totalSupply));

        BoardroomSnapshot memory newSnapshot = BoardroomSnapshot({
            time: block.number,
            rewardReceived: _amount,
            rewardPerShare: nextRPS
        });
        boardroomHistory[_token].push(newSnapshot);

        emit RewardAdded(_token, msg.sender, _amount);
    }

    function governanceRecoverUnsupported(
        IERC20 _token,
        uint256 _amount,
        address _to
    ) external onlyOperator {
        // do not allow to drain core tokens
        require(address(_token) != address(maintoken), "maintoken");
        require(address(_token) != address(share), "share");
        _token.safeTransfer(_to, _amount);
    }

    function touchSacrificeReward() external onlyOperator {
        isSacrificeReward = !isSacrificeReward;
    }
}
